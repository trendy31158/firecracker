swagger: "2.0"
info:
  title: Firecracker MVP API
  description: "Firecraker MVP - RESTful public-facing API.


  The API is accessible through HTTP calls on specific URLs carrying JSON modeled data. The transport medium is a Unix Domain Socket."

  version: 0.1.0
  termsOfService: ""
  contact:
    email: "acatan@amazon.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

host: "localhost"
basePath: "/"

schemes:
  - http
consumes:
  - application/json
produces:
  - application/json

paths:
  /:
    get:
      summary: Return general information about an instance.
      operationId: describeInstance
      responses:
        200:
          description: The instance information.
          schema:
            $ref: '#/definitions/InstanceInfo'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
  /boot/source:
    get:
      summary: "Get configured boot source."
      operationId: "getGuestBootSource"
      responses:
        200:
          description: Specified boot source.
          schema:
            $ref: "#/definitions/BootSource"
        404:
          description: Boot source does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: "Creates new boot source. If boot source already exists,
                updates its state based on new input. May fail if update is not possible."
      operationId: "putGuestBootSource"
      parameters:
      - name: "body"
        in: body
        description: "Guest boot source properties"
        required: true
        schema:
          $ref: "#/definitions/BootSource"
      responses:
        201:
          description: Boot source created.
        204:
          description: Boot source updated.
        400:
          description: Boot source cannot be created due to bad input.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error'

  /metadata:
    get:
      summary: Return metadata about an instance.
      operationId: getMetadata
      responses:
        200:
          description: The instance metadata.
          schema:
            $ref: '#/definitions/InstanceMetadata'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
  /actions:
    get:
      summary: Return the list of (most recent) actions for an instance.
      operationId: listInstanceActions
      responses:
        200:
          description: The (most recent) instance actions listed by action identifier.
          schema:
            type: array
            items:
              type: string
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
  /action/{action_id}:
    get:
      summary: Return detailed information about an action.
      operationId: describeInstanceAction
      parameters:
      - name: action_id
        in: path
        description: The action identifier.
        required: true
        type: string
      responses:
        200:
          description: The instance action information.
          schema:
            $ref: '#/definitions/InstanceActionInfo'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: Create an instance action.
      operationId: createInstanceAction
      parameters:
      - name: action_id
        in: path
        description: The action identifier.
        required: true
        type: string
      - name: info
        in: body
        required: true
        schema:
          $ref: '#/definitions/InstanceActionInfo'
      responses:
        201:
          description: No previous action existed so a new one was created.
        204:
          description: Action updated.
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
  /limiters:
    get:
      summary: Retrieves list of currently created limiters.
      operationId: listLimiters
      parameters:
        - name: next_token
          in: query
          type: string
          description: |
            Opaque token that specifies where to start the next list of limiters. If not provided or
            NULL, start from the beginning.
      responses:
        200:
          description: List of limiters.
          schema:
            $ref: '#/definitions/LimiterList'
        default:
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error'
  /limiters/{limiter_id}:
    get:
      summary: "Retrieves limiter specified by 'limiter_id' path parameter."
      operationId: describeLimiter
      parameters:
        - name: limiter_id
          in: path
          description: Id of the limiter to retrieve.
          required: true
          type: string
      responses:
        200:
          description: Specified limiter.
          schema:
            $ref: '#/definitions/Limiter'
        404:
          description: Limiter does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: "Creates new limiter with ID specified by 'limiter_id' path parameter. If limiter with specified ID
                already exists, updates its state based on new input. May fail if update is not possible."
      operationId: updateLimiter
      parameters:
        - name: limiter_id
          in: path
          description: Id of the limiter to retrieve.
          required: true
          type: string
        - name: limiter
          in: body
          description: Limiter to create or update.
          required: true
          schema:
            $ref: '#/definitions/Limiter'
      responses:
        201:
          description: Limiter created.
        204:
          description: Limiter updated.
        400:
          description: Limiter cannot be created due to bad input.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: "Deletes limiter with ID specified by 'limiter_id' path parameter.
                Will clean up any resources associated with this limiter."
      operationId: deleteLimiter
      parameters:
        - name: limiter_id
          in: path
          description: Id of the limiter to retrieve.
          required: true
          type: string
      responses:
        202:
          description: Limiter deleted.
        default:
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error'
  /drives:
    get:
      summary: "All guest drives"
      description: "Returns list of guest storage drives."
      operationId: "getGuestDrives"
      responses:
        200:
          description: List of guest drives
          schema:
            type: array
            items:
              $ref: "#/definitions/Drive"
        default:
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error'
  /drives/{drive_id}:
    get:
      summary: "Get guest drive by 'drive_id' path parameter."
      operationId: "getGuestDriveByID"
      parameters:
      - name: "drive_id"
        in: path
        description: "The id of the guest drive."
        required: true
        type: string
      responses:
        200:
          description: Specified drive.
          schema:
            $ref: "#/definitions/Drive"
        404:
          description: Drive does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: "Creates new drive with ID specified by 'drive_id' path parameter. If drive with specified ID
                already exists, updates its state based on new input. May fail if update is not possible."
      operationId: "putGuestDriveByID"
      parameters:
      - name: "drive_id"
        in: path
        description: "The id of the guest drive."
        required: true
        type: string
      - name: "body"
        in: body
        description: "Guest drive properties"
        required: true
        schema:
          $ref: "#/definitions/Drive"
      responses:
        201:
          description: Drive created.
        204:
          description: Drive updated.
        400:
          description: Drive cannot be created due to bad input.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: "Deletes drive with ID specified by 'drive_id' path parameter.
                Will clean up any resources associated with this drive."
      operationId: "deleteGuestDriveByID"
      parameters:
      - name: "drive_id"
        in: path
        description: "The id of guest drive to delete."
        required: true
        type: string
      responses:
        202:
          description: Drive deleted.
        default:
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error'
  /drives/{drive_id}/limiters:
    get:
      summary: Retrieves list of limiters IDs currently applied to the drive with 'drive_id'.
      operationId: "getLimitersForGuestDrive"
      parameters:
      - name: "drive_id"
        in: path
        description: "The id of the guest drive to get limiters for."
        required: true
        type: string
      responses:
        200:
          description: List of limiters IDs currently applied to this drive.
          schema:
            type: array
            items:
              type: integer
              format: int32
        404:
          description: Drive does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error'
  /drives/{drive_id}/limiters/{limiter_id}:
    put:
      summary: Applies limiter 'limiter_id' to drive 'drive_id'
      operationId: applyLimiterToDrive
      parameters:
      - name: "drive_id"
        in: path
        description: "The id of the guest drive to apply limiter 'limiter_id' to."
        required: true
        type: string
      - name: "limiter_id"
        in: path
        description: "The id of the limiter to be applied to drive 'drive_id'."
        required: true
        type: string
      responses:
        200:
          description: Limiter applied.
        400:
          description: Limiter cannot be applied due to bad input.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error'

  /network-interfaces:
    get:
      summary: "All guest network interfaces"
      description: "Returns list of guest network interfaces."
      operationId: "getGuestNetworkInterfaces"
      responses:
        200:
          description: List of guest network interfaces
          schema:
            type: array
            items:
              $ref: "#/definitions/NetworkInterface"
        default:
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error'
  /network-interfaces/{iface_id}:
    get:
      summary: "Get guest network interface by 'iface_id' path parameter."
      operationId: "getGuestNetworkInterfaceByID"
      parameters:
      - name: "iface_id"
        in: path
        description: "The id of the guest network interface."
        required: true
        type: string
      responses:
        200:
          description: Specified network interface.
          schema:
            $ref: "#/definitions/NetworkInterface"
        404:
          description: Network interface does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: "Creates new network interface with ID specified by 'iface_id' path parameter.
                If network interface with specified ID already exists,
                updates its state based on new input. May fail if update is not possible."
      operationId: "putGuestNetworkInterfaceByID"
      parameters:
      - name: "iface_id"
        in: path
        description: "The id of the guest network interface."
        required: true
        type: string
      - name: "body"
        in: body
        description: "Guest network interface properties"
        required: true
        schema:
          $ref: "#/definitions/NetworkInterface"
      responses:
        201:
          description: Network interface created.
        204:
          description: Network interface updated.
        400:
          description: Network interface cannot be created due to bad input.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: "Deletes network interface with ID specified by 'iface_id' path parameter.
                Will clean up any resources associated with this network interface."
      operationId: "deleteGuestNetworkInterfaceByID"
      parameters:
      - name: "iface_id"
        in: path
        description: "The id of guest network interface to delete."
        required: true
        type: string
      responses:
        202:
          description: Network interface deleted.
        default:
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error'
  /network-interfaces/{iface_id}/limiters:
    get:
      summary: Retrieves list of limiters IDs currently applied to the network interface with 'iface_id'.
      operationId: "getLimitersForGuestNetworkInterface"
      parameters:
      - name: "iface_id"
        in: path
        description: "The id of the guest network interface to get limiters for."
        required: true
        type: string
      responses:
        200:
          description: List of limiters IDs currently applied to this network interface.
          schema:
            type: array
            items:
              type: integer
              format: int32
        404:
          description: Network interface does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error'
  /network-interfaces/{iface_id}/limiters/{limiter_id}:
    put:
      summary: Applies limiter 'limiter_id' to network interface 'iface_id'
      operationId: applyLimiterToNetworkInterface
      parameters:
      - name: "iface_id"
        in: path
        description: "The id of the guest network interface to apply limiter 'limiter_id' to."
        required: true
        type: string
      - name: "limiter_id"
        in: path
        description: "The id of the limiter to be applied to network interface 'iface_id'."
        required: true
        type: string
      responses:
        200:
          description: Limiter applied.
        400:
          description: Limiter cannot be applied due to bad input.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error'
  /vsocks:
    get:
      summary: "All guest vsocks"
      description: "Returns list of guest storage vsocks."
      operationId: "getGuestVsocks"
      responses:
        200:
          description: List of guest vsocks
          schema:
            type: array
            items:
              $ref: "#/definitions/Vsock"
        default:
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error'
  /vsocks/{vsock_id}:
    get:
      summary: "Get guest vsock by 'vsock_id' path parameter."
      operationId: "getGuestVsockByID"
      parameters:
      - name: "vsock_id"
        in: path
        description: "The id of the guest vsock."
        required: true
        type: string
      responses:
        200:
          description: Specified vsock.
          schema:
            $ref: "#/definitions/Vsock"
        404:
          description: Vsock does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error'
    put:
      summary: "Creates new vsock with ID specified by 'vsock_id' path parameter. If vsock with specified ID
                already exists, updates its state based on new input. May fail if update is not possible."
      operationId: "putGuestVsockByID"
      parameters:
      - name: "vsock_id"
        in: path
        description: "The id of the guest vsock."
        required: true
        type: string
      - name: "body"
        in: body
        description: "Guest vsock properties"
        required: true
        schema:
          $ref: "#/definitions/Vsock"
      responses:
        201:
          description: Vsock created.
        204:
          description: Vsock updated.
        400:
          description: Vsock cannot be created due to bad input.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: "Deletes vsock with ID specified by 'vsock_id' path parameter.
                Will clean up any resources associated with this vsock."
      operationId: "deleteGuestVsockByID"
      parameters:
      - name: "vsock_id"
        in: path
        description: "The id of guest vsock to delete."
        required: true
        type: string
      responses:
        202:
          description: Vsock deleted.
        default:
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error'
  /vsocks/{vsock_id}/limiters:
    get:
      summary: Retrieves list of limiters IDs currently applied to the vsock with 'vsock_id'.
      operationId: "getLimitersForGuestVsock"
      parameters:
      - name: "vsock_id"
        in: path
        description: "The id of the guest vsock to get limiters for."
        required: true
        type: string
      responses:
        200:
          description: List of limiters IDs currently applied to this vsock.
          schema:
            type: array
            items:
              type: integer
              format: int32
        404:
          description: Vsock does not exist.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error'
  /vsocks/{vsock_id}/limiters/{limiter_id}:
    put:
      summary: Applies limiter 'limiter_id' to vsock 'vsock_id'
      operationId: applyLimiterToVsock
      parameters:
      - name: "vsock_id"
        in: path
        description: "The id of the guest vsock to apply limiter 'limiter_id' to."
        required: true
        type: string
      - name: "limiter_id"
        in: path
        description: "The id of the limiter to be applied to vsock 'vsock_id'."
        required: true
        type: string
      responses:
        200:
          description: Limiter applied.
        400:
          description: Limiter cannot be applied due to bad input.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Internal server error.
          schema:
            $ref: '#/definitions/Error'

definitions:
  NodeInfo:
    description: Node information for this instance.
    properties:
      nr_huge_pages:
        type: integer
        format: int32
        description: The number of 2MiB pages of memory in this instance.
      cores:
        type: integer
        format: int32
        description: The number of CPU cores in this instance.
      cpu_features:
        type: integer
        format: int64
        description: Bitmask for the active CPU features in this instance.

  InstanceMetadata:
    description: Instance metadata or metainformation.
    properties:
      virt_id:
        type: integer
        format: int64
        description: The numeric instance-id.
      account_id:
        type: string
        description: The AWS account ID of the instance's owner
      instance_type:
        type: string
        description: The instance type - e.g. 'm3.xlarge', etc.
      image_id:
        type: integer
        format: int64
        description: The numeric image id (ami) of the instance.
      detailed_monitoring:
        type: boolean
        description: True for enabling detailed monitoring

  InstanceInfo:
    properties:
      instance_id:
        type: string
      state:
        description: |
          The current detailed state of the Firecracker instance. This value is
          read-only by the control-plane.
        type: string
        enum:
          - Initializing
          - Initialized
          - Starting
          - Running
          - Pausing
          - Paused
          - Unpausing
          - Halting
          - Halted
          - Rebooting
          - Resetting
          - Reset
          - Terminating
          - Terminated
          - Destroying
          - Destroyed
      node_info:
        $ref: '#/definitions/NodeInfo'

  BootSource:
    type: object
    description: |
      Boot source descriptor. 'source_type' will specify the boot source type and depending
      on its value: one and only one of 'local_image', 'drive_boot' or 'network_boot' should
      describe the boot resource in detail.
    properties:
      boot_source_id:
        type: string
        description: "unique identifier for this boot source"
      source_type:
        type: string
        description: "type of boot source"
        enum:
        - "LocalImage"
        - "DriveBoot"
        - "NetworkBoot"
      local_image:
        $ref: '#/definitions/LocalImage'
      drive_boot:
        $ref: '#/definitions/DriveBoot'
      network_boot:
        $ref: '#/definitions/NetworkBoot'
      boot_args:
        type: string
        description: "kernel boot arguments"
  LocalImage:
    type: object
    description: |
      Locations for local kernel image and initrd files. Empty path(s) means not used.
    properties:
      kernel_image_path:
        type: string
        description: "host level path to the kernel image used to boot the guest"
      initrd_path:
        type: string
        description: "host level path to initrd used to boot the guest"
  DriveBoot:
    type: object
    description: Drive to use as boot source.
    properties:
      drive_id:
        type: string
        description: "unique identifier specifying which drive to boot from"
  NetworkBoot:
    type: object
    description: Network to use as boot source.
    properties:
      iface_id:
        type: string
        description: "unique identifier specifying which network interface to boot from"

  InstanceStartAction:
    type: object
    properties:
      # Timestamp generated by FC - output only
      timestamp:
        type: string

  InstanceActionInfo:
    type: object
    description: |
      Variant wrapper containing the real action.
      For listInstanceActions, only action_id will be populated.
      instance_device_detach_action will only be present if action_type is InstanceDeviceDetach.
    required:
      - action_id
    properties:
      action_id:
        type: string
        minLength: 1
        maxLength: 64
      action_type:
        description: Enumeration indicating what type of action is contained in the payload.
        type: string
        enum:
          - InstanceStart
          - InstanceReset
          - InstanceHalt
          - InstanceDeviceDetach
      # Note that Attach is implicit in device create (PUT)
      instance_device_detach_action:
          $ref: '#/definitions/InstanceDeviceDetachAction'
      # Timestamp generated by FC - output only
      timestamp:
        type: string

  InstanceDeviceDetachAction:
    type: object
    required:
      - device_type
      - device_resource_id
    properties:
      device_type:
        type: string
        enum:
          - "drive"
          - "network-iface"
          - "vsock"
      device_resource_id:
        type: string
        minLength: 1
        maxLength: 64
      # If true then tear out device without guest cooperation
      force:
        type: boolean

  LimiterCounters:
    type: object
    properties:
      packets:
        type: integer
        format: int64
      bytes:
        type: integer
        format: int64
      dropped_packets:
        type: integer
        format: int64
      dropped_bytes:
        type: integer
        format: int64
  TokenBucket:
    type: object
    properties:
      size:
        type: integer
        format: int64
      cost:
        type: integer
        format: int64
      initial_value:
        type: integer
        format: int64
      refill_rate:
        type: integer
        format: int64
  LimiterConfig:
    type: object
    properties:
      bandwidth:
        $ref: '#/definitions/TokenBucket'
        description: In bits.
      pps:
        $ref: '#/definitions/TokenBucket'
        description: In packets or ops.
      max_queue_len:
        type: integer
        format: int64
  Limiter:
    type: object
    properties:
      limiter_id:
        description: Id of this limiter.
        type: string
      egress:
        $ref: '#/definitions/LimiterConfig'
      ingress:
        $ref: '#/definitions/LimiterConfig'
      egress_counters:
        $ref: '#/definitions/LimiterCounters'
      ingress_counters:
        $ref: '#/definitions/LimiterCounters'
  LimiterList:
    type: object
    properties:
      next_token:
        type: string
        description: |
          Opaque token that specifies where to start the next list of limiters. If not present or
          NULL, there are no more limiters to list.
      limiters:
        type: array
        items:
          $ref: '#/definitions/Limiter'

  DeviceState:
    type: string
    enum:
      - "attached"
      - "detaching"
      - "detached"
  Drive:
    type: object
    required:
      - drive_id
    properties:
      drive_id:
        type: string
      path_on_host:
        type: string
        description: "host level path for the guest drive"
      is_root_device:
        type: boolean
      state:
        $ref: '#/definitions/DeviceState'
  NetworkInterface:
    type: object
    required:
      - iface_id
    properties:
      iface_id:
        type: string
      mac:
        type: string
      path_on_host:
        type: string
        description: "host level path for the guest network interface"
      state:
        $ref: '#/definitions/DeviceState'
  Vsock:
    type: object
    required:
      - vsock_id
    properties:
      vsock_id:
        type: string
      path_on_host:
        type: string
        description: "host level path for the guest vsock"
      state:
        $ref: '#/definitions/DeviceState'

  Error:
    properties:
      faultMessage:
        type: string
        description: A description of the error condition.
